#[macro_use]
extern crate libc;

#[link(name = "CSteamworks")]
extern "C" {
    // TODO : convert these from c style to rust style
    fn ISteamAppList_GetNumInstalledApps() -> uint32;
    fn ISteamAppList_GetInstalledApps(pvecAppID: *mut T, unMaxAppIDs: uint32) -> uint32;
    fn ISteamAppList_GetAppName(AppId_t nAppID, char *pchName, int cchNameMax) -> int;
    fn ISteamAppList_GetAppInstallDir(AppId_t nAppID, char *pchDirectory, int cchNameMax) -> int;
    fn ISteamAppList_GetAppBuildId(AppId_t nAppID) -> int;
    fn ISteamApps_BIsSubscribed() -> bool;
    fn ISteamApps_BIsLowViolence() -> bool;
    fn ISteamApps_BIsCybercafe() -> bool;
    fn ISteamApps_BIsVACBanned() -> bool;
    fn const char * ISteamApps_GetCurrentGameLanguage();
    fn const char * ISteamApps_GetAvailableGameLanguages();
    fn ISteamApps_BIsSubscribedApp(AppId_t appID) -> bool;
    fn ISteamApps_BIsDlcInstalled(AppId_t appID) -> bool;
    fn ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID) -> uint32;
    fn bool ISteamApps_BIsSubscribedFromFreeWeekend() -> bool;
    fn int ISteamApps_GetDLCCount();
    fn bool ISteamApps_BGetDLCDataByIndex(int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize) -> bool;
    fn void ISteamApps_InstallDLC(AppId_t nAppID);
    fn void ISteamApps_UninstallDLC(AppId_t nAppID);
    fn void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);
    fn bool ISteamApps_GetCurrentBetaName(char *pchName, int cchNameBufferSize) -> bool;
    fn bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly) -> bool;
    fn uint32 ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots);
    fn uint32 ISteamApps_GetAppInstallDir(AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize);
    fn bool ISteamApps_BIsAppInstalled(AppId_t appID) -> bool;
    fn SteamID_t ISteamApps_GetAppOwner();
    fn bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal) -> bool;
    fn const char * ISteamApps_GetLaunchQueryParam(const char *pchKey);
    fn int ISteamApps_GetAppBuildId();
    fn SteamAPICall_t ISteamApps_RegisterActivationCode(const char *pchActivationCode);
    fn HSteamPipe ISteamClient_CreateSteamPipe();
    fn bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);
    fn HSteamUser ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);
    fn HSteamUser ISteamClient_CreateLocalUser(HSteamPipe *phSteamPipe, EAccountType eAccountType);
    fn void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);
    fn ISteamUser * ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamGameServer * ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn void ISteamClient_SetLocalIPBinding(uint32 unIP, uint16 usPort);
    fn ISteamFriends * ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamUtils * ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamMatchmaking * ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamMatchmakingServers * ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamUserStats * ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn fn void * ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamGameServerStats * ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamApps * ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamNetworking * ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamRemoteStorage * ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamScreenshots * ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn void ISteamClient_RunFrame();
    fn uint32 ISteamClient_GetIPCCallCount();
    fn void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);
    fn bool ISteamClient_BShutdownIfAllPipesClosed();
    fn ISteamPS3OverlayRender * ISteamClient_GetISteamPS3OverlayRender();
    fn ISteamHTTP * ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamUnifiedMessages * ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamController * ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamUGC * ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamAppList * ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamMusic * ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamMusicRemote * ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamHTMLSurface * ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn void ISteamClient_Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);
    fn void ISteamClient_Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);
    fn void ISteamClient_Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func);
    fn ISteamInventory * ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn ISteamVideo * ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    fn bool ISteamController_Init();
    fn bool ISteamController_Shutdown();
    fn void ISteamController_RunFrame();
    fn int ISteamController_GetConnectedControllers(ControllerHandle_t *handlesOut);
    fn bool ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle);
    fn ControllerActionSetHandle_t ISteamController_GetActionSetHandle(const char *pszActionSetName);
    fn void ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);
    fn ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle);
    fn ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(const char *pszActionName);
    fn ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);
    fn int ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut);
    fn ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);
    fn ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(const char *pszActionName);
    fn int ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut);
    fn void ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);
    fn void ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec);
    fn const char * ISteamFriends_GetPersonaName();
    fn SteamAPICall_t ISteamFriends_SetPersonaName(const char *pchPersonaName);
    fn EPersonaState ISteamFriends_GetPersonaState();
    fn int ISteamFriends_GetFriendCount(int iFriendFlags);
    fn SteamID_t ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);
    fn EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);
    fn EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);
    fn const char * ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);
    fn bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, FriendGameInfo_t *pFriendGameInfo);
    fn const char * ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);
    fn int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);
    fn const char * ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);
    fn int ISteamFriends_GetFriendsGroupCount();
    fn FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG);
    fn const char * ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);
    fn int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);
    fn void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount);
    fn bool ISteamFriends_HasFriend(CSteamID steamIDFriend, int iFriendFlags);
    fn int ISteamFriends_GetClanCount();
    fn SteamID_t ISteamFriends_GetClanByIndex(int iClan);
    fn const char * ISteamFriends_GetClanName(CSteamID steamIDClan);
    fn const char * ISteamFriends_GetClanTag(CSteamID steamIDClan);
    fn bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting);
    fn SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest);
    fn int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);
    fn SteamID_t ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);
    fn bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);
    fn void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);
    fn void ISteamFriends_ActivateGameOverlay(const char *pchDialog);
    fn void ISteamFriends_ActivateGameOverlayToUser(const char *pchDialog, CSteamID steamID);
    fn void ISteamFriends_ActivateGameOverlayToWebPage(const char *pchURL);
    fn void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);
    fn void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);
    fn void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);
    fn int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);
    fn int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);
    fn int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);
    fn bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);
    fn SteamAPICall_t ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);
    fn SteamID_t ISteamFriends_GetClanOwner(CSteamID steamIDClan);
    fn int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);
    fn SteamID_t ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);
    fn uint32 ISteamFriends_GetUserRestrictions();
    fn bool ISteamFriends_SetRichPresence(const char *pchKey, const char *pchValue);
    fn void ISteamFriends_ClearRichPresence();
    fn const char * ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, const char *pchKey);
    fn int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);
    fn const char * ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);
    fn void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);
    fn bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, const char *pchConnectString);
    fn int ISteamFriends_GetCoplayFriendCount();
    fn SteamID_t ISteamFriends_GetCoplayFriend(int iCoplayFriend);
    fn int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);
    fn AppId_t ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);
    fn SteamAPICall_t ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);
    fn bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);
    fn int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);
    fn SteamID_t ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);
    fn bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, const char *pchText);
    fn int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter);
    fn bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);
    fn bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);
    fn bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);
    fn bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);
    fn bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);
    fn bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, const char *pchMsgToSend);
    fn int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType);
    fn SteamAPICall_t ISteamFriends_GetFollowerCount(CSteamID steamID);
    fn SteamAPICall_t ISteamFriends_IsFollowing(CSteamID steamID);
    fn SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint32 unStartIndex);
    fn bool ISteamGameServer_InitGameServer(uint32 unIP, uint16 usGamePort, uint16 usQueryPort, uint32 unFlags, AppId_t nGameAppId, const char *pchVersionString);
    fn void ISteamGameServer_SetProduct(const char *pszProduct);
    fn void ISteamGameServer_SetGameDescription(const char *pszGameDescription);
    fn void ISteamGameServer_SetModDir(const char *pszModDir);
    fn void ISteamGameServer_SetDedicatedServer(bool bDedicated);
    fn void ISteamGameServer_LogOn(const char *pszToken);
    fn void ISteamGameServer_LogOnAnonymous();
    fn void ISteamGameServer_LogOff();
    fn bool ISteamGameServer_BLoggedOn();
    fn bool ISteamGameServer_BSecure();
    fn SteamID_t ISteamGameServer_GetSteamID();
    fn bool ISteamGameServer_WasRestartRequested();
    fn void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);
    fn void ISteamGameServer_SetBotPlayerCount(int cBotplayers);
    fn void ISteamGameServer_SetServerName(const char *pszServerName);
    fn void ISteamGameServer_SetMapName(const char *pszMapName);
    fn void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);
    fn void ISteamGameServer_SetSpectatorPort(uint16 unSpectatorPort);
    fn void ISteamGameServer_SetSpectatorServerName(const char *pszSpectatorServerName);
    fn void ISteamGameServer_ClearAllKeyValues();
    fn void ISteamGameServer_SetKeyValue(const char *pKey, const char *pValue);
    fn void ISteamGameServer_SetGameTags(const char *pchGameTags);
    fn void ISteamGameServer_SetGameData(const char *pchGameData);
    fn void ISteamGameServer_SetRegion(const char *pszRegion);
    fn bool ISteamGameServer_SendUserConnectAndAuthenticate(uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser);
    fn SteamID_t ISteamGameServer_CreateUnauthenticatedUserConnection();
    fn void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);
    fn bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, const char *pchPlayerName, uint32 uScore);
    fn HAuthTicket ISteamGameServer_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket);
    fn EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, CSteamID steamID);
    fn void ISteamGameServer_EndAuthSession(CSteamID steamID);
    fn void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);
    fn EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);
    fn bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);
    fn void ISteamGameServer_GetGameplayStats();
    fn SteamAPICall_t ISteamGameServer_GetServerReputation();
    fn uint32 ISteamGameServer_GetPublicIP();
    fn bool ISteamGameServer_HandleIncomingPacket(const void *pData, int cbData, uint32 srcIP, uint16 srcPort);
    fn int ISteamGameServer_GetNextOutgoingPacket(void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort);
    fn void ISteamGameServer_EnableHeartbeats(bool bActive);
    fn void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);
    fn void ISteamGameServer_ForceHeartbeat();
    fn SteamAPICall_t ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);
    fn SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);
    fn SteamAPICall_t ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);
    fn bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, const char *pchName, int32 *pData);
    fn bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, const char *pchName, float *pData);
    fn bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved);
    fn bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, const char *pchName, int32 nData);
    fn bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, const char *pchName, float fData);
    fn bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength);
    fn bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, const char *pchName);
    fn bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, const char *pchName);
    fn SteamAPICall_t ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);
    fn bool ISteamHTMLSurface_Init();
    fn bool ISteamHTMLSurface_Shutdown();
    fn SteamAPICall_t ISteamHTMLSurface_CreateBrowser(const char *pchUserAgent, const char *pchUserCSS);
    fn void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData);
    fn void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight);
    fn void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue);
    fn void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, const char *pchScript);
    fn void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton);
    fn void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton);
    fn void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton);
    fn void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);
    fn void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int32 nDelta);
    fn void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers);
    fn void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers);
    fn void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers);
    fn void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll);
    fn void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll);
    fn void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);
    fn void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse);
    fn void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);
    fn void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);
    fn void ISteamHTMLSurface_SetCookie(const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath = "/", RTime32 nExpires = 0, bool bSecure = false, bool bHTTPOnly = false);
    fn void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);
    fn void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);
    fn void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);
    fn void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);
    fn void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles);
    fn HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL);
    fn bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue);
    fn bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds);
    fn bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue);
    fn bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue);
    fn bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle);
    fn bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle);
    fn bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);
    fn bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);
    fn bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize);
    fn bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize);
    fn bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize);
    fn bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize);
    fn bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize);
    fn bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);
    fn bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut);
    fn bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen);
    fn HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);
    fn bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);
    fn bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie);
    fn bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);
    fn bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo);
    fn bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);
    fn bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds);
    fn bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut);
    fn EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);
    fn bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize);
    fn uint32 ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);
    fn bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);
    fn void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);
    fn bool ISteamInventory_GetAllItems(SteamInventoryResult_t *pResultHandle);
    fn bool ISteamInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs);
    fn bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize);
    fn bool ISteamInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE = false);
    fn bool ISteamInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength);
    fn bool ISteamInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle);
    fn bool ISteamInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef);
    fn bool ISteamInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength);
    fn bool ISteamInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity);
    fn bool ISteamInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength);
    fn bool ISteamInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest);
    fn void ISteamInventory_SendItemDropHeartbeat();
    fn bool ISteamInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition);
    fn bool ISteamInventory_TradeItems(SteamInventoryResult_t *pResultHandle, CSteamID steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength);
    fn bool ISteamInventory_LoadItemDefinitions();
    fn bool ISteamInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize);
    fn bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSize);
    fn int ISteamMatchmaking_GetFavoriteGameCount();
    fn bool ISteamMatchmaking_GetFavoriteGame(int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer);
    fn int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer);
    fn bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags);
    fn SteamAPICall_t ISteamMatchmaking_RequestLobbyList();
    fn void ISteamMatchmaking_AddRequestLobbyListStringFilter(const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType);
    fn void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);
    fn void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(const char *pchKeyToMatch, int nValueToBeCloseTo);
    fn void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);
    fn void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);
    fn void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);
    fn void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);
    fn SteamID_t ISteamMatchmaking_GetLobbyByIndex(int iLobby);
    fn SteamAPICall_t ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);
    fn SteamAPICall_t ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);
    fn void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);
    fn bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);
    fn int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);
    fn SteamID_t ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);
    fn const char * ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, const char *pchKey);
    fn bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, const char *pchKey, const char *pchValue);
    fn int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);
    fn bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize);
    fn bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, const char *pchKey);
    fn const char * ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, const char *pchKey);
    fn void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, const char *pchKey, const char *pchValue);
    fn bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, const void *pvMsgBody, int cubMsgBody);
    int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType);
    bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);
    void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, CSteamID steamIDGameServer);
    bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer);
    bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);
    int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);
    bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);
    bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);
    SteamID_t ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);
    bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);
    bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);
    void ISteamMatchmaking_CheckForPSNGameBootInvite(unsigned int iGameBootAttributes);
    HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse);
    HServerListRequest ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse);
    HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse);
    HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse);
    HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse);
    HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse);
    void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);
    gameserveritem_t * ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);
    void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);
    void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);
    bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);
    int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);
    void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);
    HServerQuery ISteamMatchmakingServers_PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse);
    HServerQuery ISteamMatchmakingServers_PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse);
    HServerQuery ISteamMatchmakingServers_ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse);
    void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);
    bool ISteamMusic_BIsEnabled();
    bool ISteamMusic_BIsPlaying();
    AudioPlayback_Status ISteamMusic_GetPlaybackStatus();
    void ISteamMusic_Play();
    void ISteamMusic_Pause();
    void ISteamMusic_PlayPrevious();
    void ISteamMusic_PlayNext();
    void ISteamMusic_SetVolume(float flVolume);
    float ISteamMusic_GetVolume();
    bool ISteamMusicRemote_RegisterSteamMusicRemote(const char *pchName);
    bool ISteamMusicRemote_DeregisterSteamMusicRemote();
    bool ISteamMusicRemote_BIsCurrentMusicRemote();
    bool ISteamMusicRemote_BActivationSuccess(bool bValue);
    bool ISteamMusicRemote_SetDisplayName(const char *pchDisplayName);
    bool ISteamMusicRemote_SetPNGIcon_64x64(void *pvBuffer, uint32 cbBufferLength);
    bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);
    bool ISteamMusicRemote_EnablePlayNext(bool bValue);
    bool ISteamMusicRemote_EnableShuffled(bool bValue);
    bool ISteamMusicRemote_EnableLooped(bool bValue);
    bool ISteamMusicRemote_EnableQueue(bool bValue);
    bool ISteamMusicRemote_EnablePlaylists(bool bValue);
    bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);
    bool ISteamMusicRemote_UpdateShuffled(bool bValue);
    bool ISteamMusicRemote_UpdateLooped(bool bValue);
    bool ISteamMusicRemote_UpdateVolume(float flValue);
    bool ISteamMusicRemote_CurrentEntryWillChange();
    bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);
    bool ISteamMusicRemote_UpdateCurrentEntryText(const char *pchText);
    bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);
    bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(void *pvBuffer, uint32 cbBufferLength);
    bool ISteamMusicRemote_CurrentEntryDidChange();
    bool ISteamMusicRemote_QueueWillChange();
    bool ISteamMusicRemote_ResetQueueEntries();
    bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, const char *pchEntryText);
    bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);
    bool ISteamMusicRemote_QueueDidChange();
    bool ISteamMusicRemote_PlaylistWillChange();
    bool ISteamMusicRemote_ResetPlaylistEntries();
    bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, const char *pchEntryText);
    bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);
    bool ISteamMusicRemote_PlaylistDidChange();
    bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel = 0);
    bool ISteamNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel = 0);
    bool ISteamNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel = 0);
    bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);
    bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);
    bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);
    bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, P2PSessionState_t *pConnectionState);
    bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);
    SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint32 nIP, uint16 nPort, bool bAllowUseOfPacketRelay);
    SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);
    SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint32 nIP, uint16 nPort, int nTimeoutSec);
    bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);
    bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);
    bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable);
    bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize);
    bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize);
    bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket);
    bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket);
    bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, uint32 *punIPRemote, uint16 *punPortRemote);
    bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, uint32 *pnIP, uint16 *pnPort);
    ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);
    int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);
    bool ISteamRemoteStorage_FileWrite(const char *pchFile, const void *pvData, int32 cubData);
    int32 ISteamRemoteStorage_FileRead(const char *pchFile, void *pvData, int32 cubDataToRead);
    SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(const char *pchFile, const void *pvData, uint32 cubData);
    SteamAPICall_t ISteamRemoteStorage_FileReadAsync(const char *pchFile, uint32 nOffset, uint32 cubToRead);
    bool ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead);
    bool ISteamRemoteStorage_FileForget(const char *pchFile);
    bool ISteamRemoteStorage_FileDelete(const char *pchFile);
    SteamAPICall_t ISteamRemoteStorage_FileShare(const char *pchFile);
    bool ISteamRemoteStorage_SetSyncPlatforms(const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);
    UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(const char *pchFile);
    bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData);
    bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);
    bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);
    bool ISteamRemoteStorage_FileExists(const char *pchFile);
    bool ISteamRemoteStorage_FilePersisted(const char *pchFile);
    int32 ISteamRemoteStorage_GetFileSize(const char *pchFile);
    int64 ISteamRemoteStorage_GetFileTimestamp(const char *pchFile);
    ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(const char *pchFile);
    int32 ISteamRemoteStorage_GetFileCount();
    const char * ISteamRemoteStorage_GetFileNameAndSize(int iFile, int32 *pnFileSizeInBytes);
    bool ISteamRemoteStorage_GetQuota(int32 *pnTotalBytes, int32 *puAvailableBytes);
    bool ISteamRemoteStorage_IsCloudEnabledForAccount();
    bool ISteamRemoteStorage_IsCloudEnabledForApp();
    void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);
    SteamAPICall_t ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint32 unPriority);
    bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected);
    bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner);
    int32 ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction);
    int32 ISteamRemoteStorage_GetCachedUGCCount();
    UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int32 iCachedContent);
    void ISteamRemoteStorage_GetFileListFromServer();
    bool ISteamRemoteStorage_FileFetch(const char *pchFile);
    bool ISteamRemoteStorage_FilePersist(const char *pchFile);
    bool ISteamRemoteStorage_SynchronizeToClient();
    bool ISteamRemoteStorage_SynchronizeToServer();
    bool ISteamRemoteStorage_ResetFileRequestState();
    SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType);
    PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);
    bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, const char *pchFile);
    bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile);
    bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, const char *pchTitle);
    bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchDescription);
    bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);
    bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags);
    SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);
    SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld);
    SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);
    SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint32 unStartIndex);
    SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);
    SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint32 unStartIndex);
    SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);
    bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription);
    SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);
    SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);
    SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);
    SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags);
    SteamAPICall_t ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags);
    SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);
    SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint32 unStartIndex);
    SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags);
    SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, const char *pchLocation, uint32 unPriority);
    ScreenshotHandle ISteamScreenshots_WriteScreenshot(void *pubRGB, uint32 cubRGB, int nWidth, int nHeight);
    ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight);
    void ISteamScreenshots_TriggerScreenshot();
    void ISteamScreenshots_HookScreenshots(bool bHook);
    bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, const char *pchLocation);
    bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);
    bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);
    UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage);
    UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage);
    UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs);
    SteamAPICall_t ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);
    bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails);
    bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize);
    bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize);
    bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries);
    bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint32 *pStatValue);
    uint32 ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index);
    bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, bool *pbIsImage);
    uint32 ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index);
    bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize);
    bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);
    bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName);
    bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName);
    bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);
    bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);
    bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);
    bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);
    bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);
    bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);
    bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage);
    bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds);
    bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName);
    bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);
    bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText);
    bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays);
    bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue);
    SteamAPICall_t ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds);
    SteamAPICall_t ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);
    UGCUpdateHandle_t ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);
    bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle);
    bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription);
    bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage);
    bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData);
    bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);
    bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags);
    bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder);
    bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile);
    bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey);
    bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue);
    SteamAPICall_t ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote);
    EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64* punBytesTotal);
    SteamAPICall_t ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);
    SteamAPICall_t ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);
    uint32 ISteamUGC_GetNumSubscribedItems();
    uint32 ISteamUGC_GetSubscribedItems(PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries);
    uint32 ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);
    bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp);
    bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal);
    bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);
    bool ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder);
    void ISteamUGC_SuspendDownloads(bool bSuspend);
    ClientUnifiedMessageHandle ISteamUnifiedMessages_SendMethod(const char *pchServiceMethod, const void *pRequestBuffer, uint32 unRequestBufferSize, uint64 unContext);
    bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, uint32 *punResponseSize, EResult *peResult);
    bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, void *pResponseBuffer, uint32 unResponseBufferSize, bool bAutoRelease);
    bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);
    bool ISteamUnifiedMessages_SendNotification(const char *pchServiceNotification, const void *pNotificationBuffer, uint32 unNotificationBufferSize);
    HSteamUser ISteamUser_GetHSteamUser();
    bool ISteamUser_BLoggedOn();
    SteamID_t ISteamUser_GetSteamID();
    int ISteamUser_InitiateGameConnection(void *pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure);
    void ISteamUser_TerminateGameConnection(uint32 unIPServer, uint16 usPortServer);
    void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, const char *pchExtraInfo = "");
    bool ISteamUser_GetUserDataFolder(char *pchBuffer, int cubBuffer);
    void ISteamUser_StartVoiceRecording();
    void ISteamUser_StopVoiceRecording();
    EVoiceResult ISteamUser_GetAvailableVoice(uint32 *pcbCompressed, uint32 *pcbUncompressed, uint32 nUncompressedVoiceDesiredSampleRate);
    EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed, void *pUncompressedDestBuffer, uint32 cbUncompressedDestBufferSize, uint32 *nUncompressBytesWritten, uint32 nUncompressedVoiceDesiredSampleRate);
    EVoiceResult ISteamUser_DecompressVoice(const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate);
    uint32 ISteamUser_GetVoiceOptimalSampleRate();
    HAuthTicket ISteamUser_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket);
    EBeginAuthSessionResult ISteamUser_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, CSteamID steamID);
    void ISteamUser_EndAuthSession(CSteamID steamID);
    void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);
    EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);
    bool ISteamUser_BIsBehindNAT();
    void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer);
    SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(void *pDataToInclude, int cbDataToInclude);
    bool ISteamUser_GetEncryptedAppTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket);
    int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);
    int ISteamUser_GetPlayerSteamLevel();
    SteamAPICall_t ISteamUser_RequestStoreAuthURL(const char *pchRedirectURL);
    void ISteamUser_LogOn(bool bInteractive);
    void ISteamUser_LogOnAndLinkSteamAccountToPSN(bool bInteractive, const char *pchUserName, const char *pchPassword);
    void ISteamUser_LogOnAndCreateNewSteamAccountIfNeeded(bool bInteractive);
    SteamID_t ISteamUser_GetConsoleSteamID();
    bool ISteamUserStats_RequestCurrentStats();
    bool ISteamUserStats_GetStat(const char *pchName, int32 *pData);
    bool ISteamUserStats_GetStat_(const char *pchName, float *pData);
    bool ISteamUserStats_SetStat(const char *pchName, int32 nData);
    bool ISteamUserStats_SetStat_(const char *pchName, float fData);
    bool ISteamUserStats_UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength);
    bool ISteamUserStats_GetAchievement(const char *pchName, bool *pbAchieved);
    bool ISteamUserStats_SetAchievement(const char *pchName);
    bool ISteamUserStats_ClearAchievement(const char *pchName);
    bool ISteamUserStats_GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime);
    bool ISteamUserStats_StoreStats();
    int ISteamUserStats_GetAchievementIcon(const char *pchName);
    const char * ISteamUserStats_GetAchievementDisplayAttribute(const char *pchName, const char *pchKey);
    bool ISteamUserStats_IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress);
    uint32 ISteamUserStats_GetNumAchievements();
    const char * ISteamUserStats_GetAchievementName(uint32 iAchievement);
    SteamAPICall_t ISteamUserStats_RequestUserStats(CSteamID steamIDUser);
    bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, const char *pchName, int32 *pData);
    bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, const char *pchName, float *pData);
    bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved);
    bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime);
    bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);
    SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);
    SteamAPICall_t ISteamUserStats_FindLeaderboard(const char *pchLeaderboardName);
    const char * ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);
    int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);
    ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);
    ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);
    SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);
    SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers);
    bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax);
    SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount);
    SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);
    SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers();
    SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages();
    int ISteamUserStats_GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved);
    int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved);
    bool ISteamUserStats_GetAchievementAchievedPercent(const char *pchName, float *pflPercent);
    SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays);
    bool ISteamUserStats_GetGlobalStat(const char *pchStatName, int64 *pData);
    bool ISteamUserStats_GetGlobalStat_(const char *pchStatName, double *pData);
    int32 ISteamUserStats_GetGlobalStatHistory(const char *pchStatName, int64 *pData, uint32 cubData);
    int32 ISteamUserStats_GetGlobalStatHistory_(const char *pchStatName, double *pData, uint32 cubData);
    bool ISteamUserStats_InstallPS3Trophies();
    uint64 ISteamUserStats_GetTrophySpaceRequiredBeforeInstall();
    bool ISteamUserStats_SetUserStatsData(const void *pvData, uint32 cubData);
    bool ISteamUserStats_GetUserStatsData(void *pvData, uint32 cubData, uint32 *pcubWritten);
    uint32 ISteamUtils_GetSecondsSinceAppActive();
    uint32 ISteamUtils_GetSecondsSinceComputerActive();
    EUniverse ISteamUtils_GetConnectedUniverse();
    uint32 ISteamUtils_GetServerRealTime();
    const char * ISteamUtils_GetIPCountry();
    bool ISteamUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight);
    bool ISteamUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize);
    bool ISteamUtils_GetCSERIPPort(uint32 *unIP, uint16 *usPort);
    uint8 ISteamUtils_GetCurrentBatteryPower();
    uint32 ISteamUtils_GetAppID();
    void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);
    bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed);
    ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);
    bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed);
    void ISteamUtils_RunFrame();
    uint32 ISteamUtils_GetIPCCallCount();
    void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);
    bool ISteamUtils_IsOverlayEnabled();
    bool ISteamUtils_BOverlayNeedsPresent();
    SteamAPICall_t ISteamUtils_CheckFileSignature(const char *szFileName);
    void ISteamUtils_PostPS3SysutilCallback(uint64_t status, uint64_t param, void* userdata);
    bool ISteamUtils_BIsReadyToShutdown();
    bool ISteamUtils_BIsPSNOnline();
    void ISteamUtils_SetPSNGameBootInviteStrings(const char *pchSubject, const char *pchBody);
    bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText);
    uint32 ISteamUtils_GetEnteredGamepadTextLength();
    bool ISteamUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText);
    const char * ISteamUtils_GetSteamUILanguage();
    bool ISteamUtils_IsSteamRunningInVR();
    void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);
    void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);
    bool ISteamVideo_IsBroadcasting(int *pnNumViewers);
    HTTPRequestHandle ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL);
    bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue);
    bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds);
    bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue);
    bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue);
    bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle);
    bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle);
    bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);
    bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);
    bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize);
    bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize);
    bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize);
    bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize);
    bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize);
    bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);
    bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut);
    bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen);
    HTTPCookieContainerHandle ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);
    bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);
    bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie);
    bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);
    bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo);
    bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);
    bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds);
    bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut);
    EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);
    bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize);
    uint32 ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);
    bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);
    void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);
    bool ISteamGameServerInventory_GetAllItems(SteamInventoryResult_t *pResultHandle);
    bool ISteamGameServerInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs);
    bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize);
    bool ISteamGameServerInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE = false);
    bool ISteamGameServerInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength);
    bool ISteamGameServerInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle);
    bool ISteamGameServerInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef);
    bool ISteamGameServerInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength);
    bool ISteamGameServerInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity);
    bool ISteamGameServerInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength);
    bool ISteamGameServerInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest);
    void ISteamGameServerInventory_SendItemDropHeartbeat();
    bool ISteamGameServerInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition);
    bool ISteamGameServerInventory_TradeItems(SteamInventoryResult_t *pResultHandle, CSteamID steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength);
    bool ISteamGameServerInventory_LoadItemDefinitions();
    bool ISteamGameServerInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize);
    bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSize);
    bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel = 0);
    bool ISteamGameServerNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel = 0);
    bool ISteamGameServerNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel = 0);
    bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);
    bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);
    bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);
    bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, P2PSessionState_t *pConnectionState);
    bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);
    SNetListenSocket_t ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint32 nIP, uint16 nPort, bool bAllowUseOfPacketRelay);
    SNetSocket_t ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);
    SNetSocket_t ISteamGameServerNetworking_CreateConnectionSocket(uint32 nIP, uint16 nPort, int nTimeoutSec);
    bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);
    bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);
    bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable);
    bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize);
    bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize);
    bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket);
    bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket);
    bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, uint32 *punIPRemote, uint16 *punPortRemote);
    bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, uint32 *pnIP, uint16 *pnPort);
    ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);
    int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);
    UGCQueryHandle_t ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage);
    UGCQueryHandle_t ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage);
    UGCQueryHandle_t ISteamGameServerUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs);
    SteamAPICall_t ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);
    bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails);
    bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize);
    bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize);
    bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries);
    bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint32 *pStatValue);
    uint32 ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index);
    bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, bool *pbIsImage);
    uint32 ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index);
    bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize);
    bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);
    bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName);
    bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName);
    bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);
    bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);
    bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);
    bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);
    bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);
    bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);
    bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage);
    bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds);
    bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName);
    bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);
    bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText);
    bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays);
    bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue);
    SteamAPICall_t ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds);
    SteamAPICall_t ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);
    UGCUpdateHandle_t ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);
    bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle);
    bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription);
    bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage);
    bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData);
    bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);
    bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags);
    bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder);
    bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile);
    bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey);
    bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue);
    SteamAPICall_t ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote);
    EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64* punBytesTotal);
    SteamAPICall_t ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);
    SteamAPICall_t ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);
    SteamAPICall_t ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);
    uint32 ISteamGameServerUGC_GetNumSubscribedItems();
    uint32 ISteamGameServerUGC_GetSubscribedItems(PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries);
    uint32 ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);
    bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp);
    bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal);
    bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);
    bool ISteamGameServerUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder);
    void ISteamGameServerUGC_SuspendDownloads(bool bSuspend);
    uint32 ISteamGameServerUtils_GetSecondsSinceAppActive();
    uint32 ISteamGameServerUtils_GetSecondsSinceComputerActive();
    EUniverse ISteamGameServerUtils_GetConnectedUniverse();
    uint32 ISteamGameServerUtils_GetServerRealTime();
    const char * ISteamGameServerUtils_GetIPCountry();
    bool ISteamGameServerUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight);
    bool ISteamGameServerUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize);
    bool ISteamGameServerUtils_GetCSERIPPort(uint32 *unIP, uint16 *usPort);
    uint8 ISteamGameServerUtils_GetCurrentBatteryPower();
    uint32 ISteamGameServerUtils_GetAppID();
    void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);
    bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed);
    ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);
    bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed);
    void ISteamGameServerUtils_RunFrame();
    uint32 ISteamGameServerUtils_GetIPCCallCount();
    void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);
    bool ISteamGameServerUtils_IsOverlayEnabled();
    bool ISteamGameServerUtils_BOverlayNeedsPresent();
    SteamAPICall_t ISteamGameServerUtils_CheckFileSignature(const char *szFileName);
    void ISteamGameServerUtils_PostPS3SysutilCallback(uint64_t status, uint64_t param, void* userdata);
    bool ISteamGameServerUtils_BIsReadyToShutdown();
    bool ISteamGameServerUtils_BIsPSNOnline();
    void ISteamGameServerUtils_SetPSNGameBootInviteStrings(const char *pchSubject, const char *pchBody);
    bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText);
    uint32 ISteamGameServerUtils_GetEnteredGamepadTextLength();
    bool ISteamGameServerUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText);
    const char * ISteamGameServerUtils_GetSteamUILanguage();
    bool ISteamGameServerUtils_IsSteamRunningInVR();
    void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);
}
