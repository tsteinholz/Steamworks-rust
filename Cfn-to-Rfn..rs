fn ISteamAppList_GetNumInstalledApps() -> uint32;
fn ISteamAppList_GetInstalledApps(AppId_t *pvecAppID, uint32 unMaxAppIDs) -> uint32;
fn ISteamAppList_GetAppName(AppId_t nAppID, char *pchName, int cchNameMax) -> int;
fn ISteamAppList_GetAppInstallDir(AppId_t nAppID, char *pchDirectory, int cchNameMax) -> int;
fn ISteamAppList_GetAppBuildId(AppId_t nAppID) -> int;
fn ISteamApps_BIsSubscribed() -> bool;
fn ISteamApps_BIsLowViolence() -> bool;
fn ISteamApps_BIsCybercafe() -> bool;
fn ISteamApps_BIsVACBanned() -> bool;
fn ISteamApps_GetCurrentGameLanguage() -> const char *;
fn ISteamApps_GetAvailableGameLanguages() -> const char *;
fn ISteamApps_BIsSubscribedApp(AppId_t appID) -> bool;
fn ISteamApps_BIsDlcInstalled(AppId_t appID) -> bool;
fn ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID) -> uint32;
fn ISteamApps_BIsSubscribedFromFreeWeekend() -> bool;
fn ISteamApps_GetDLCCount() -> int;
fn ISteamApps_BGetDLCDataByIndex(int iDLC, AppId_t *pAppID, bool *pbAvailable, char *pchName, int cchNameBufferSize) -> bool;
fn ISteamApps_InstallDLC(AppId_t nAppID) -> void;
fn ISteamApps_UninstallDLC(AppId_t nAppID) -> void;
fn ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID) -> void;
fn ISteamApps_GetCurrentBetaName(char *pchName, int cchNameBufferSize) -> bool;
fn ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly) -> bool;
fn ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t *pvecDepots, uint32 cMaxDepots) -> uint32;
fn ISteamApps_GetAppInstallDir(AppId_t appID, char *pchFolder, uint32 cchFolderBufferSize) -> uint32;
fn ISteamApps_BIsAppInstalled(AppId_t appID) -> bool;
fn ID_t ISteamApps_GetAppOwner() -> Stea;
fn ISteamApps_GetLaunchQueryParam(const char *pchKey) -> const char *;
fn ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, uint64 *punBytesDownloaded, uint64 *punBytesTotal) -> bool;
fn ISteamApps_GetAppBuildId() -> int;
fn ICall_t ISteamApps_RegisterActivationCode(const char *pchActivationCode) -> SteamA;
fn ISteamClient_CreateSteamPipe() -> HSteamPipe;
fn ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe) -> bool;
fn ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe) -> HSteamUser;
fn ISteamClient_CreateLocalUser(HSteamPipe *phSteamPipe, EAccountType eAccountType) -> HSteamUser;
fn ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser) -> void;
fn ISteamUser * ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamUser * ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamGameServer * ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamGameServer * ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamClient_SetLocalIPBinding(uint32 unIP, uint16 usPort) -> void;
fn ISteamFriends * ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamFriends * ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamUtils * ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamUtils * ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamMatchmaking * ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamMatchmaking * ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamMatchmakingServers * ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamMatchmakingServers * ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> void *;
fn ISteamUserStats * ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamUserStats * ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamGameServerStats * ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamGameServerStats * ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamApps * ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamApps * ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamNetworking * ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamNetworking * ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamRemoteStorage * ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamRemoteStorage * ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamScreenshots * ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamScreenshots * ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamClient_RunFrame() -> void;
fn ISteamClient_GetIPCCallCount() -> uint32;
fn ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction) -> void;
fn ISteamClient_BShutdownIfAllPipesClosed() -> bool;
fn ISteamPS3OverlayRender * ISteamClient_GetISteamPS3OverlayRender() -> ISteamPS3OverlayRender * ISteamClient_GetISteamPS3OverlayRender() ->;
fn ISteamHTTP * ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamHTTP * ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamUnifiedMessages * ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamUnifiedMessages * ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamController * ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamController * ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamUGC * ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamUGC * ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamAppList * ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamAppList * ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamMusic * ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamMusic * ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamMusicRemote * ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamMusicRemote * ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamHTMLSurface * ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamHTMLSurface * ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamClient_Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func) -> void;
fn ISteamClient_Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func) -> void;
fn ISteamClient_Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func) -> void;
fn ISteamInventory * ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamInventory * ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamVideo * ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) -> ISteamVideo * ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion) ->;
fn ISteamController_Init() -> bool;
fn ISteamController_Shutdown() -> bool;
fn ISteamController_RunFrame() -> void;
fn ISteamController_GetConnectedControllers(ControllerHandle_t *handlesOut) -> int;
fn ISteamController_ShowBindingPanel(ControllerHandle_t controllerHandle) -> bool;
fn ISteamController_GetActionSetHandle(const char *pszActionSetName) -> ControllerActionSetHandle_t;
fn ISteamController_ActivateActionSet(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle) -> void;
fn ISteamController_GetCurrentActionSet(ControllerHandle_t controllerHandle) -> ControllerActionSetHandle_t;
fn ISteamController_GetDigitalActionHandle(const char *pszActionName) -> ControllerDigitalActionHandle_t;
fn ISteamController_GetDigitalActionData(ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle) -> ControllerDigitalActionData_t;
fn ISteamController_GetDigitalActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin *originsOut) -> int;
fn ISteamController_GetAnalogActionHandle(const char *pszActionName) -> ControllerAnalogActionHandle_t;
fn ISteamController_GetAnalogActionData(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle) -> ControllerAnalogActionData_t;
fn ISteamController_GetAnalogActionOrigins(ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin *originsOut) -> int;
fn ISteamController_StopAnalogActionMomentum(ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction) -> void;
fn ISteamController_TriggerHapticPulse(ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec) -> void;
fn ISteamFriends_GetPersonaName() -> const char *;
fn ICall_t ISteamFriends_SetPersonaName(const char *pchPersonaName) -> SteamA;
fn ISteamFriends_GetPersonaState() -> EPersonaState;
fn ISteamFriends_GetFriendCount(int iFriendFlags) -> int;
fn ID_t ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags) -> Stea;
fn ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend) -> EFriendRelationship;
fn ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend) -> EPersonaState;
fn ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend) -> const char *;
fn ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, FriendGameInfo_t *pFriendGameInfo) -> bool;
fn ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName) -> const char *;
fn ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend) -> int;
fn ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer) -> const char *;
fn ISteamFriends_GetFriendsGroupCount() -> int;
fn ID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG) -> FriendsGrou;
fn ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID) -> const char *;
fn ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID) -> int;
fn ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID *pOutSteamIDMembers, int nMembersCount) -> void;
fn ISteamFriends_HasFriend(CSteamID steamIDFriend, int iFriendFlags) -> bool;
fn ISteamFriends_GetClanCount() -> int;
fn ID_t ISteamFriends_GetClanByIndex(int iClan) -> Stea;
fn ISteamFriends_GetClanName(CSteamID steamIDClan) -> const char *;
fn ISteamFriends_GetClanTag(CSteamID steamIDClan) -> const char *;
fn ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting) -> bool;
fn ICall_t ISteamFriends_DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest) -> SteamA;
fn ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource) -> int;
fn ID_t ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend) -> Stea;
fn ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource) -> bool;
fn ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking) -> void;
fn ISteamFriends_ActivateGameOverlay(const char *pchDialog) -> void;
fn ISteamFriends_ActivateGameOverlayToUser(const char *pchDialog, CSteamID steamID) -> void;
fn ISteamFriends_ActivateGameOverlayToWebPage(const char *pchURL) -> void;
fn ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag) -> void;
fn ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith) -> void;
fn ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby) -> void;
fn ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend) -> int;
fn ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend) -> int;
fn ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend) -> int;
fn ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly) -> bool;
fn ICall_t ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan) -> SteamA;
fn ID_t ISteamFriends_GetClanOwner(CSteamID steamIDClan) -> Stea;
fn ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan) -> int;
fn ID_t ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer) -> Stea;
fn ISteamFriends_GetUserRestrictions() -> uint32;
fn ISteamFriends_SetRichPresence(const char *pchKey, const char *pchValue) -> bool;
fn ISteamFriends_ClearRichPresence() -> void;
fn ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, const char *pchKey) -> const char *;
fn ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend) -> int;
fn ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey) -> const char *;
fn ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend) -> void;
fn ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, const char *pchConnectString) -> bool;
fn ISteamFriends_GetCoplayFriendCount() -> int;
fn ID_t ISteamFriends_GetCoplayFriend(int iCoplayFriend) -> Stea;
fn ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend) -> int;
fn Id_t ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend) -> Ap;
fn ICall_t ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan) -> SteamA;
fn ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan) -> bool;
fn ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan) -> int;
fn ID_t ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser) -> Stea;
fn ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, const char *pchText) -> bool;
fn ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter) -> int;
fn ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser) -> bool;
fn ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat) -> bool;
fn ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat) -> bool;
fn ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat) -> bool;
fn ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled) -> bool;
fn ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, const char *pchMsgToSend) -> bool;
fn ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType) -> int;
fn ICall_t ISteamFriends_GetFollowerCount(CSteamID steamID) -> SteamA;
fn ICall_t ISteamFriends_IsFollowing(CSteamID steamID) -> SteamA;
fn ICall_t ISteamFriends_EnumerateFollowingList(uint32 unStartIndex) -> SteamA;
fn ISteamGameServer_InitGameServer(uint32 unIP, uint16 usGamePort, uint16 usQueryPort, uint32 unFlags, AppId_t nGameAppId, const char *pchVersionString) -> bool;
fn ISteamGameServer_SetProduct(const char *pszProduct) -> void;
fn ISteamGameServer_SetGameDescription(const char *pszGameDescription) -> void;
fn ISteamGameServer_SetModDir(const char *pszModDir) -> void;
fn ISteamGameServer_SetDedicatedServer(bool bDedicated) -> void;
fn ISteamGameServer_LogOn(const char *pszToken) -> void;
fn ISteamGameServer_LogOnAnonymous() -> void;
fn ISteamGameServer_LogOff() -> void;
fn ISteamGameServer_BLoggedOn() -> bool;
fn ISteamGameServer_BSecure() -> bool;
fn ID_t ISteamGameServer_GetSteamID() -> Stea;
fn ISteamGameServer_WasRestartRequested() -> bool;
fn ISteamGameServer_SetMaxPlayerCount(int cPlayersMax) -> void;
fn ISteamGameServer_SetBotPlayerCount(int cBotplayers) -> void;
fn ISteamGameServer_SetServerName(const char *pszServerName) -> void;
fn ISteamGameServer_SetMapName(const char *pszMapName) -> void;
fn ISteamGameServer_SetPasswordProtected(bool bPasswordProtected) -> void;
fn ISteamGameServer_SetSpectatorPort(uint16 unSpectatorPort) -> void;
fn ISteamGameServer_SetSpectatorServerName(const char *pszSpectatorServerName) -> void;
fn ISteamGameServer_ClearAllKeyValues() -> void;
fn ISteamGameServer_SetKeyValue(const char *pKey, const char *pValue) -> void;
fn ISteamGameServer_SetGameTags(const char *pchGameTags) -> void;
fn ISteamGameServer_SetGameData(const char *pchGameData) -> void;
fn ISteamGameServer_SetRegion(const char *pszRegion) -> void;
fn ISteamGameServer_SendUserConnectAndAuthenticate(uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser) -> bool;
fn ID_t ISteamGameServer_CreateUnauthenticatedUserConnection() -> Stea;
fn ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser) -> void;
fn ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, const char *pchPlayerName, uint32 uScore) -> bool;
fn ISteamGameServer_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket) -> HAuthTicket;
fn ISteamGameServer_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, CSteamID steamID) -> EBeginAuthSessionResult;
fn ISteamGameServer_EndAuthSession(CSteamID steamID) -> void;
fn ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket) -> void;
fn ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID) -> EUserHasLicenseForAppResult;
fn ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup) -> bool;
fn ISteamGameServer_GetGameplayStats() -> void;
fn ICall_t ISteamGameServer_GetServerReputation() -> SteamA;
fn ISteamGameServer_GetPublicIP() -> uint32;
fn ISteamGameServer_HandleIncomingPacket(const void *pData, int cbData, uint32 srcIP, uint16 srcPort) -> bool;
fn ISteamGameServer_GetNextOutgoingPacket(void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort) -> int;
fn ISteamGameServer_EnableHeartbeats(bool bActive) -> void;
fn ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval) -> void;
fn ISteamGameServer_ForceHeartbeat() -> void;
fn ICall_t ISteamGameServer_AssociateWithClan(CSteamID steamIDClan) -> SteamA;
fn ICall_t ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer) -> SteamA;
fn ICall_t ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser) -> SteamA;
fn ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, const char *pchName, int32 *pData) -> bool;
fn ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, const char *pchName, float *pData) -> bool;
fn ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved) -> bool;
fn ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, const char *pchName, int32 nData) -> bool;
fn ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, const char *pchName, float fData) -> bool;
fn ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength) -> bool;
fn ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, const char *pchName) -> bool;
fn ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, const char *pchName) -> bool;
fn ICall_t ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser) -> SteamA;
fn ISteamHTMLSurface_Init() -> bool;
fn ISteamHTMLSurface_Shutdown() -> bool;
fn ICall_t ISteamHTMLSurface_CreateBrowser(const char *pchUserAgent, const char *pchUserCSS) -> SteamA;
fn ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, const char *pchURL, const char *pchPostData) -> void;
fn ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight) -> void;
fn ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, const char *pchKey, const char *pchValue) -> void;
fn ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, const char *pchScript) -> void;
fn ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton) -> void;
fn ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton) -> void;
fn ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, ISteamHTMLSurface::EHTMLMouseButton eMouseButton) -> void;
fn ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y) -> void;
fn ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int32 nDelta) -> void;
fn ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers) -> void;
fn ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers) -> void;
fn ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, ISteamHTMLSurface::EHTMLKeyModifiers eHTMLKeyModifiers) -> void;
fn ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll) -> void;
fn ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll) -> void;
fn ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus) -> void;
fn ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, const char *pchSearchStr, bool bCurrentlyInFind, bool bReverse) -> void;
fn ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle) -> void;
fn ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y) -> void;
fn ISteamHTMLSurface_SetCookie(const char *pchHostname, const char *pchKey, const char *pchValue, const char *pchPath = "/", RTime32 nExpires = 0, bool bSecure = false, bool bHTTPOnly = false) -> void;
fn ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY) -> void;
fn ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode) -> void;
fn ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed) -> void;
fn ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult) -> void;
fn ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, const char **pchSelectedFiles) -> void;
fn ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL) -> HTTPRequestHandle;
fn ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue) -> bool;
fn ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds) -> bool;
fn ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue) -> bool;
fn ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue) -> bool;
fn ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle) -> bool;
fn ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle) -> bool;
fn ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest) -> bool;
fn ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest) -> bool;
fn ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize) -> bool;
fn ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize) -> bool;
fn ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize) -> bool;
fn ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize) -> bool;
fn ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize) -> bool;
fn ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest) -> bool;
fn ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut) -> bool;
fn ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen) -> bool;
fn ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify) -> HTTPCookieContainerHandle;
fn ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer) -> bool;
fn ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie) -> bool;
fn ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer) -> bool;
fn ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo) -> bool;
fn ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate) -> bool;
fn ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds) -> bool;
fn ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut) -> bool;
fn ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle) -> EResult;
fn ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize) -> bool;
fn ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle) -> uint32;
fn ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected) -> bool;
fn ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle) -> void;
fn ISteamInventory_GetAllItems(SteamInventoryResult_t *pResultHandle) -> bool;
fn ISteamInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs) -> bool;
fn ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize) -> bool;
fn ISteamInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE = false) -> bool;
fn ISteamInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength) -> bool;
fn ISteamInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle) -> bool;
fn ISteamInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef) -> bool;
fn ISteamInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength) -> bool;
fn ISteamInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity) -> bool;
fn ISteamInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength) -> bool;
fn ISteamInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest) -> bool;
fn ISteamInventory_SendItemDropHeartbeat() -> void;
fn ISteamInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition) -> bool;
fn ISteamInventory_TradeItems(SteamInventoryResult_t *pResultHandle, CSteamID steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength) -> bool;
fn ISteamInventory_LoadItemDefinitions() -> bool;
fn ISteamInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize) -> bool;
fn ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSize) -> bool;
fn ISteamMatchmaking_GetFavoriteGameCount() -> int;
fn ISteamMatchmaking_GetFavoriteGame(int iGame, AppId_t *pnAppID, uint32 *pnIP, uint16 *pnConnPort, uint16 *pnQueryPort, uint32 *punFlags, uint32 *pRTime32LastPlayedOnServer) -> bool;
fn ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer) -> int;
fn ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags) -> bool;
fn ICall_t ISteamMatchmaking_RequestLobbyList() -> SteamA;
fn ISteamMatchmaking_AddRequestLobbyListStringFilter(const char *pchKeyToMatch, const char *pchValueToMatch, ELobbyComparison eComparisonType) -> void;
fn ISteamMatchmaking_AddRequestLobbyListNumericalFilter(const char *pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType) -> void;
fn ISteamMatchmaking_AddRequestLobbyListNearValueFilter(const char *pchKeyToMatch, int nValueToBeCloseTo) -> void;
fn ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable) -> void;
fn ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter) -> void;
fn ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults) -> void;
fn ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby) -> void;
fn ID_t ISteamMatchmaking_GetLobbyByIndex(int iLobby) -> Stea;
fn ICall_t ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers) -> SteamA;
fn ICall_t ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby) -> SteamA;
fn ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby) -> void;
fn ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee) -> bool;
fn ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby) -> int;
fn ID_t ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember) -> Stea;
fn ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, const char *pchKey) -> const char *;
fn ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, const char *pchKey, const char *pchValue) -> bool;
fn ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby) -> int;
fn ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, char *pchKey, int cchKeyBufferSize, char *pchValue, int cchValueBufferSize) -> bool;
fn ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, const char *pchKey) -> bool;
fn ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, const char *pchKey) -> const char *;
fn ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, const char *pchKey, const char *pchValue) -> void;
fn ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, const void *pvMsgBody, int cubMsgBody) -> bool;
fn ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, CSteamID *pSteamIDUser, void *pvData, int cubData, EChatEntryType *peChatEntryType) -> int;
fn ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby) -> bool;
fn ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, CSteamID steamIDGameServer) -> void;
fn ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, uint32 *punGameServerIP, uint16 *punGameServerPort, CSteamID *psteamIDGameServer) -> bool;
fn ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers) -> bool;
fn ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby) -> int;
fn ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType) -> bool;
fn ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable) -> bool;
fn ID_t ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby) -> Stea;
fn ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner) -> bool;
fn ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent) -> bool;
fn ISteamMatchmaking_CheckForPSNGameBootInvite(unsigned int iGameBootAttributes) -> void;
fn ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse) -> HServerListRequest;
fn ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse *pRequestServersResponse) -> HServerListRequest;
fn ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse) -> HServerListRequest;
fn ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse) -> HServerListRequest;
fn ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse) -> HServerListRequest;
fn ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t **ppchFilters, uint32 nFilters, ISteamMatchmakingServerListResponse *pRequestServersResponse) -> HServerListRequest;
fn ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest) -> void;
fn ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer) -> gameserveritem_t *;
fn ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest) -> void;
fn ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest) -> void;
fn ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest) -> bool;
fn ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest) -> int;
fn ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer) -> void;
fn ISteamMatchmakingServers_PingServer(uint32 unIP, uint16 usPort, ISteamMatchmakingPingResponse *pRequestServersResponse) -> HServerQuery;
fn ISteamMatchmakingServers_PlayerDetails(uint32 unIP, uint16 usPort, ISteamMatchmakingPlayersResponse *pRequestServersResponse) -> HServerQuery;
fn ISteamMatchmakingServers_ServerRules(uint32 unIP, uint16 usPort, ISteamMatchmakingRulesResponse *pRequestServersResponse) -> HServerQuery;
fn ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery) -> void;
fn ISteamMusic_BIsEnabled() -> bool;
fn ISteamMusic_BIsPlaying() -> bool;
fn ISteamMusic_GetPlaybackStatus() -> AudioPlayback_Status;
fn ISteamMusic_Play() -> void;
fn ISteamMusic_Pause() -> void;
fn ISteamMusic_PlayPrevious() -> void;
fn ISteamMusic_PlayNext() -> void;
fn ISteamMusic_SetVolume(float flVolume) -> void;
fn ISteamMusic_GetVolume() -> float;
fn ISteamMusicRemote_RegisterSteamMusicRemote(const char *pchName) -> bool;
fn ISteamMusicRemote_DeregisterSteamMusicRemote() -> bool;
fn ISteamMusicRemote_BIsCurrentMusicRemote() -> bool;
fn ISteamMusicRemote_BActivationSuccess(bool bValue) -> bool;
fn ISteamMusicRemote_SetDisplayName(const char *pchDisplayName) -> bool;
fn ISteamMusicRemote_SetPNGIcon_64x64(void *pvBuffer, uint32 cbBufferLength) -> bool;
fn ISteamMusicRemote_EnablePlayPrevious(bool bValue) -> bool;
fn ISteamMusicRemote_EnablePlayNext(bool bValue) -> bool;
fn ISteamMusicRemote_EnableShuffled(bool bValue) -> bool;
fn ISteamMusicRemote_EnableLooped(bool bValue) -> bool;
fn ISteamMusicRemote_EnableQueue(bool bValue) -> bool;
fn ISteamMusicRemote_EnablePlaylists(bool bValue) -> bool;
fn ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus) -> bool;
fn ISteamMusicRemote_UpdateShuffled(bool bValue) -> bool;
fn ISteamMusicRemote_UpdateLooped(bool bValue) -> bool;
fn ISteamMusicRemote_UpdateVolume(float flValue) -> bool;
fn ISteamMusicRemote_CurrentEntryWillChange() -> bool;
fn ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable) -> bool;
fn ISteamMusicRemote_UpdateCurrentEntryText(const char *pchText) -> bool;
fn ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue) -> bool;
fn ISteamMusicRemote_UpdateCurrentEntryCoverArt(void *pvBuffer, uint32 cbBufferLength) -> bool;
fn ISteamMusicRemote_CurrentEntryDidChange() -> bool;
fn ISteamMusicRemote_QueueWillChange() -> bool;
fn ISteamMusicRemote_ResetQueueEntries() -> bool;
fn ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, const char *pchEntryText) -> bool;
fn ISteamMusicRemote_SetCurrentQueueEntry(int nID) -> bool;
fn ISteamMusicRemote_QueueDidChange() -> bool;
fn ISteamMusicRemote_PlaylistWillChange() -> bool;
fn ISteamMusicRemote_ResetPlaylistEntries() -> bool;
fn ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, const char *pchEntryText) -> bool;
fn ISteamMusicRemote_SetCurrentPlaylistEntry(int nID) -> bool;
fn ISteamMusicRemote_PlaylistDidChange() -> bool;
fn ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel = 0) -> bool;
fn ISteamNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel = 0) -> bool;
fn ISteamNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel = 0) -> bool;
fn ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote) -> bool;
fn ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote) -> bool;
fn ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel) -> bool;
fn ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, P2PSessionState_t *pConnectionState) -> bool;
fn ISteamNetworking_AllowP2PPacketRelay(bool bAllow) -> bool;
fn ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint32 nIP, uint16 nPort, bool bAllowUseOfPacketRelay) -> SNetListenSocket_t;
fn ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay) -> SNetSocket_t;
fn ISteamNetworking_CreateConnectionSocket(uint32 nIP, uint16 nPort, int nTimeoutSec) -> SNetSocket_t;
fn ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd) -> bool;
fn ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd) -> bool;
fn ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable) -> bool;
fn ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize) -> bool;
fn ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize) -> bool;
fn ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket) -> bool;
fn ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket) -> bool;
fn ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, uint32 *punIPRemote, uint16 *punPortRemote) -> bool;
fn ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, uint32 *pnIP, uint16 *pnPort) -> bool;
fn ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket) -> ESNetSocketConnectionType;
fn ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket) -> int;
fn ISteamRemoteStorage_FileWrite(const char *pchFile, const void *pvData, int32 cubData) -> bool;
fn ISteamRemoteStorage_FileRead(const char *pchFile, void *pvData, int32 cubDataToRead) -> int32;
fn ICall_t ISteamRemoteStorage_FileWriteAsync(const char *pchFile, const void *pvData, uint32 cubData) -> SteamA;
fn ICall_t ISteamRemoteStorage_FileReadAsync(const char *pchFile, uint32 nOffset, uint32 cubToRead) -> SteamA;
fn ISteamRemoteStorage_FileReadAsyncComplete(SteamAPICall_t hReadCall, void *pvBuffer, uint32 cubToRead) -> bool;
fn ISteamRemoteStorage_FileForget(const char *pchFile) -> bool;
fn ISteamRemoteStorage_FileDelete(const char *pchFile) -> bool;
fn ICall_t ISteamRemoteStorage_FileShare(const char *pchFile) -> SteamA;
fn ISteamRemoteStorage_SetSyncPlatforms(const char *pchFile, ERemoteStoragePlatform eRemoteStoragePlatform) -> bool;
fn ISteamRemoteStorage_FileWriteStreamOpen(const char *pchFile) -> UGCFileWriteStreamHandle_t;
fn ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, const void *pvData, int32 cubData) -> bool;
fn ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle) -> bool;
fn ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle) -> bool;
fn ISteamRemoteStorage_FileExists(const char *pchFile) -> bool;
fn ISteamRemoteStorage_FilePersisted(const char *pchFile) -> bool;
fn ISteamRemoteStorage_GetFileSize(const char *pchFile) -> int32;
fn ISteamRemoteStorage_GetFileTimestamp(const char *pchFile) -> int64;
fn ISteamRemoteStorage_GetSyncPlatforms(const char *pchFile) -> ERemoteStoragePlatform;
fn ISteamRemoteStorage_GetFileCount() -> int32;
fn ISteamRemoteStorage_GetFileNameAndSize(int iFile, int32 *pnFileSizeInBytes) -> const char *;
fn ISteamRemoteStorage_GetQuota(int32 *pnTotalBytes, int32 *puAvailableBytes) -> bool;
fn ISteamRemoteStorage_IsCloudEnabledForAccount() -> bool;
fn ISteamRemoteStorage_IsCloudEnabledForApp() -> bool;
fn ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled) -> void;
fn ICall_t ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint32 unPriority) -> SteamA;
fn ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, int32 *pnBytesDownloaded, int32 *pnBytesExpected) -> bool;
fn ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, AppId_t *pnAppID, char **ppchName, int32 *pnFileSizeInBytes, CSteamID *pSteamIDOwner) -> bool;
fn ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, void *pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction) -> int32;
fn ISteamRemoteStorage_GetCachedUGCCount() -> int32;
fn ISteamRemoteStorage_GetCachedUGCHandle(int32 iCachedContent) -> UGCHandle_t;
fn ISteamRemoteStorage_GetFileListFromServer() -> void;
fn ISteamRemoteStorage_FileFetch(const char *pchFile) -> bool;
fn ISteamRemoteStorage_FilePersist(const char *pchFile) -> bool;
fn ISteamRemoteStorage_SynchronizeToClient() -> bool;
fn ISteamRemoteStorage_SynchronizeToServer() -> bool;
fn ISteamRemoteStorage_ResetFileRequestState() -> bool;
fn ICall_t ISteamRemoteStorage_PublishWorkshopFile(const char *pchFile, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags, EWorkshopFileType eWorkshopFileType) -> SteamA;
fn ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId) -> PublishedFileUpdateHandle_t;
fn ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, const char *pchFile) -> bool;
fn ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, const char *pchPreviewFile) -> bool;
fn ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, const char *pchTitle) -> bool;
fn ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchDescription) -> bool;
fn ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility) -> bool;
fn ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, SteamParamStringArray_t *pTags) -> bool;
fn ICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle) -> SteamA;
fn ICall_t ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld) -> SteamA;
fn ICall_t ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId) -> SteamA;
fn ICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint32 unStartIndex) -> SteamA;
fn ICall_t ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId) -> SteamA;
fn ICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint32 unStartIndex) -> SteamA;
fn ICall_t ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId) -> SteamA;
fn ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, const char *pchChangeDescription) -> bool;
fn ICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId) -> SteamA;
fn ICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp) -> SteamA;
fn ICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId) -> SteamA;
fn ICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint32 unStartIndex, SteamParamStringArray_t *pRequiredTags, SteamParamStringArray_t *pExcludedTags) -> SteamA;
fn ICall_t ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, const char *pchVideoAccount, const char *pchVideoIdentifier, const char *pchPreviewFile, AppId_t nConsumerAppId, const char *pchTitle, const char *pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, SteamParamStringArray_t *pTags) -> SteamA;
fn ICall_t ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction) -> SteamA;
fn ICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint32 unStartIndex) -> SteamA;
fn ICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, SteamParamStringArray_t *pTags, SteamParamStringArray_t *pUserTags) -> SteamA;
fn ICall_t ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, const char *pchLocation, uint32 unPriority) -> SteamA;
fn ISteamScreenshots_WriteScreenshot(void *pubRGB, uint32 cubRGB, int nWidth, int nHeight) -> ScreenshotHandle;
fn ISteamScreenshots_AddScreenshotToLibrary(const char *pchFilename, const char *pchThumbnailFilename, int nWidth, int nHeight) -> ScreenshotHandle;
fn ISteamScreenshots_TriggerScreenshot() -> void;
fn ISteamScreenshots_HookScreenshots(bool bHook) -> void;
fn ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, const char *pchLocation) -> bool;
fn ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID) -> bool;
fn ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID) -> bool;
fn ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage) -> UGCQueryHandle_t;
fn ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage) -> UGCQueryHandle_t;
fn ISteamUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs) -> UGCQueryHandle_t;
fn ICall_t ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle) -> SteamA;
fn ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails) -> bool;
fn ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize) -> bool;
fn ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize) -> bool;
fn ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries) -> bool;
fn ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint32 *pStatValue) -> bool;
fn ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index) -> uint32;
fn ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, bool *pbIsImage) -> bool;
fn ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index) -> uint32;
fn ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize) -> bool;
fn ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle) -> bool;
fn ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName) -> bool;
fn ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName) -> bool;
fn ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags) -> bool;
fn ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription) -> bool;
fn ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata) -> bool;
fn ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren) -> bool;
fn ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews) -> bool;
fn ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly) -> bool;
fn ISteamUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage) -> bool;
fn ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds) -> bool;
fn ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName) -> bool;
fn ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag) -> bool;
fn ISteamUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText) -> bool;
fn ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays) -> bool;
fn ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue) -> bool;
fn ICall_t ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds) -> SteamA;
fn ICall_t ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType) -> SteamA;
fn ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID) -> UGCUpdateHandle_t;
fn ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle) -> bool;
fn ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription) -> bool;
fn ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage) -> bool;
fn ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData) -> bool;
fn ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility) -> bool;
fn ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags) -> bool;
fn ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder) -> bool;
fn ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile) -> bool;
fn ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey) -> bool;
fn ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue) -> bool;
fn ICall_t ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote) -> SteamA;
fn ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64* punBytesTotal) -> ;
fn ICall_t ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp) -> SteamA;
fn ICall_t ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID) -> SteamA;
fn ISteamUGC_GetNumSubscribedItems() -> uint32;
fn ISteamUGC_GetSubscribedItems(PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries) -> uint32;
fn ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID) -> uint32;
fn ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp) -> bool;
fn ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal) -> bool;
fn ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority) -> bool;
fn ISteamUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder) -> bool;
fn ISteamUGC_SuspendDownloads(bool bSuspend) -> void;
fn ISteamUnifiedMessages_SendMethod(const char *pchServiceMethod, const void *pRequestBuffer, uint32 unRequestBufferSize, uint64 unContext) -> ClientUnifiedMessageHandle;
fn ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, uint32 *punResponseSize, EResult *peResult) -> bool;
fn ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, void *pResponseBuffer, uint32 unResponseBufferSize, bool bAutoRelease) -> bool;
fn ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle) -> bool;
fn ISteamUnifiedMessages_SendNotification(const char *pchServiceNotification, const void *pNotificationBuffer, uint32 unNotificationBufferSize) -> bool;
fn ISteamUser_GetHSteamUser() -> HSteamUser;
fn ISteamUser_BLoggedOn() -> bool;
fn ID_t ISteamUser_GetSteamID() -> Stea;
fn ISteamUser_InitiateGameConnection(void *pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure) -> int;
fn ISteamUser_TerminateGameConnection(uint32 unIPServer, uint16 usPortServer) -> void;
fn ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, const char *pchExtraInfo = "") -> void;
fn ISteamUser_GetUserDataFolder(char *pchBuffer, int cubBuffer) -> bool;
fn ISteamUser_StartVoiceRecording() -> void;
fn ISteamUser_StopVoiceRecording() -> void;
fn ISteamUser_GetAvailableVoice(uint32 *pcbCompressed, uint32 *pcbUncompressed, uint32 nUncompressedVoiceDesiredSampleRate) -> EVoiceResult;
fn ISteamUser_GetVoice(bool bWantCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, bool bWantUncompressed, void *pUncompressedDestBuffer, uint32 cbUncompressedDestBufferSize, uint32 *nUncompressBytesWritten, uint32 nUncompressedVoiceDesiredSampleRate) -> EVoiceResult;
fn ISteamUser_DecompressVoice(const void *pCompressed, uint32 cbCompressed, void *pDestBuffer, uint32 cbDestBufferSize, uint32 *nBytesWritten, uint32 nDesiredSampleRate) -> EVoiceResult;
fn ISteamUser_GetVoiceOptimalSampleRate() -> uint32;
fn ISteamUser_GetAuthSessionTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket) -> HAuthTicket;
fn ISteamUser_BeginAuthSession(const void *pAuthTicket, int cbAuthTicket, CSteamID steamID) -> EBeginAuthSessionResult;
fn ISteamUser_EndAuthSession(CSteamID steamID) -> void;
fn ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket) -> void;
fn ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID) -> EUserHasLicenseForAppResult;
fn ISteamUser_BIsBehindNAT() -> bool;
fn ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer) -> void;
fn ICall_t ISteamUser_RequestEncryptedAppTicket(void *pDataToInclude, int cbDataToInclude) -> SteamA;
fn ISteamUser_GetEncryptedAppTicket(void *pTicket, int cbMaxTicket, uint32 *pcbTicket) -> bool;
fn ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil) -> int;
fn ISteamUser_GetPlayerSteamLevel() -> int;
fn ICall_t ISteamUser_RequestStoreAuthURL(const char *pchRedirectURL) -> SteamA;
fn ISteamUser_LogOn(bool bInteractive) -> void;
fn ISteamUser_LogOnAndLinkSteamAccountToPSN(bool bInteractive, const char *pchUserName, const char *pchPassword) -> void;
fn ISteamUser_LogOnAndCreateNewSteamAccountIfNeeded(bool bInteractive) -> void;
fn ID_t ISteamUser_GetConsoleSteamID() -> Stea;
fn ISteamUserStats_RequestCurrentStats() -> bool;
fn ISteamUserStats_GetStat(const char *pchName, int32 *pData) -> bool;
fn ISteamUserStats_GetStat_(const char *pchName, float *pData) -> bool;
fn ISteamUserStats_SetStat(const char *pchName, int32 nData) -> bool;
fn ISteamUserStats_SetStat_(const char *pchName, float fData) -> bool;
fn ISteamUserStats_UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength) -> bool;
fn ISteamUserStats_GetAchievement(const char *pchName, bool *pbAchieved) -> bool;
fn ISteamUserStats_SetAchievement(const char *pchName) -> bool;
fn ISteamUserStats_ClearAchievement(const char *pchName) -> bool;
fn ISteamUserStats_GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime) -> bool;
fn ISteamUserStats_StoreStats() -> bool;
fn ISteamUserStats_GetAchievementIcon(const char *pchName) -> int;
fn ISteamUserStats_GetAchievementDisplayAttribute(const char *pchName, const char *pchKey) -> const char *;
fn ISteamUserStats_IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress) -> bool;
fn ISteamUserStats_GetNumAchievements() -> uint32;
fn ISteamUserStats_GetAchievementName(uint32 iAchievement) -> const char *;
fn ICall_t ISteamUserStats_RequestUserStats(CSteamID steamIDUser) -> SteamA;
fn ISteamUserStats_GetUserStat(CSteamID steamIDUser, const char *pchName, int32 *pData) -> bool;
fn ISteamUserStats_GetUserStat_(CSteamID steamIDUser, const char *pchName, float *pData) -> bool;
fn ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved) -> bool;
fn ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime) -> bool;
fn ISteamUserStats_ResetAllStats(bool bAchievementsToo) -> bool;
fn ICall_t ISteamUserStats_FindOrCreateLeaderboard(const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType) -> SteamA;
fn ICall_t ISteamUserStats_FindLeaderboard(const char *pchLeaderboardName) -> SteamA;
fn ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard) -> const char *;
fn ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard) -> int;
fn ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard) -> ELeaderboardSortMethod;
fn ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard) -> ELeaderboardDisplayType;
fn ICall_t ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd) -> SteamA;
fn ICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers) -> SteamA;
fn ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax) -> bool;
fn ICall_t ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount) -> SteamA;
fn ICall_t ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC) -> SteamA;
fn ICall_t ISteamUserStats_GetNumberOfCurrentPlayers() -> SteamA;
fn ICall_t ISteamUserStats_RequestGlobalAchievementPercentages() -> SteamA;
fn ISteamUserStats_GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved) -> int;
fn ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved) -> int;
fn ISteamUserStats_GetAchievementAchievedPercent(const char *pchName, float *pflPercent) -> bool;
fn ICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays) -> SteamA;
fn ISteamUserStats_GetGlobalStat(const char *pchStatName, int64 *pData) -> bool;
fn ISteamUserStats_GetGlobalStat_(const char *pchStatName, double *pData) -> bool;
fn ISteamUserStats_GetGlobalStatHistory(const char *pchStatName, int64 *pData, uint32 cubData) -> int32;
fn ISteamUserStats_GetGlobalStatHistory_(const char *pchStatName, double *pData, uint32 cubData) -> int32;
fn ISteamUserStats_InstallPS3Trophies() -> bool;
fn ISteamUserStats_GetTrophySpaceRequiredBeforeInstall() -> uint64;
fn ISteamUserStats_SetUserStatsData(const void *pvData, uint32 cubData) -> bool;
fn ISteamUserStats_GetUserStatsData(void *pvData, uint32 cubData, uint32 *pcubWritten) -> bool;
fn ISteamUtils_GetSecondsSinceAppActive() -> uint32;
fn ISteamUtils_GetSecondsSinceComputerActive() -> uint32;
fn ISteamUtils_GetConnectedUniverse() -> EUniverse;
fn ISteamUtils_GetServerRealTime() -> uint32;
fn ISteamUtils_GetIPCountry() -> const char *;
fn ISteamUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight) -> bool;
fn ISteamUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize) -> bool;
fn ISteamUtils_GetCSERIPPort(uint32 *unIP, uint16 *usPort) -> bool;
fn ISteamUtils_GetCurrentBatteryPower() -> uint8;
fn ISteamUtils_GetAppID() -> uint32;
fn ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition) -> void;
fn ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed) -> bool;
fn ICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall) -> ESteamA;
fn ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed) -> bool;
fn ISteamUtils_RunFrame() -> void;
fn ISteamUtils_GetIPCCallCount() -> uint32;
fn ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction) -> void;
fn ISteamUtils_IsOverlayEnabled() -> bool;
fn ISteamUtils_BOverlayNeedsPresent() -> bool;
fn ICall_t ISteamUtils_CheckFileSignature(const char *szFileName) -> SteamA;
fn ISteamUtils_PostPS3SysutilCallback(uint64_t status, uint64_t param, void* userdata) -> void;
fn ISteamUtils_BIsReadyToShutdown() -> bool;
fn ISteamUtils_BIsPSNOnline() -> bool;
fn ISteamUtils_SetPSNGameBootInviteStrings(const char *pchSubject, const char *pchBody) -> void;
fn ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText) -> bool;
fn ISteamUtils_GetEnteredGamepadTextLength() -> uint32;
fn ISteamUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText) -> bool;
fn ISteamUtils_GetSteamUILanguage() -> const char *;
fn ISteamUtils_IsSteamRunningInVR() -> bool;
fn ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset) -> void;
fn ISteamVideo_GetVideoURL(AppId_t unVideoAppID) -> void;
fn ISteamVideo_IsBroadcasting(int *pnNumViewers) -> bool;
fn ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, const char *pchAbsoluteURL) -> HTTPRequestHandle;
fn ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, uint64 ulContextValue) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint32 unTimeoutSeconds) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, const char *pchHeaderValue) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, const char *pchParamName, const char *pchParamValue) -> bool;
fn ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle) -> bool;
fn ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, SteamAPICall_t *pCallHandle) -> bool;
fn ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest) -> bool;
fn ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest) -> bool;
fn ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, const char *pchHeaderName, uint32 *unResponseHeaderSize) -> bool;
fn ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, const char *pchHeaderName, uint8 *pHeaderValueBuffer, uint32 unBufferSize) -> bool;
fn ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, uint32 *unBodySize) -> bool;
fn ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, uint8 *pBodyDataBuffer, uint32 unBufferSize) -> bool;
fn ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint32 cOffset, uint8 *pBodyDataBuffer, uint32 unBufferSize) -> bool;
fn ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest) -> bool;
fn ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, float *pflPercentOut) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, const char *pchContentType, uint8 *pubBody, uint32 unBodyLen) -> bool;
fn ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify) -> HTTPCookieContainerHandle;
fn ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer) -> bool;
fn ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, const char *pchHost, const char *pchUrl, const char *pchCookie) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, const char *pchUserAgentInfo) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate) -> bool;
fn ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint32 unMilliseconds) -> bool;
fn ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, bool *pbWasTimedOut) -> bool;
fn ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle) -> EResult;
fn ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t *pOutItemsArray, uint32 *punOutItemsArraySize) -> bool;
fn ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle) -> uint32;
fn ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected) -> bool;
fn ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle) -> void;
fn ISteamGameServerInventory_GetAllItems(SteamInventoryResult_t *pResultHandle) -> bool;
fn ISteamGameServerInventory_GetItemsByID(SteamInventoryResult_t *pResultHandle, const SteamItemInstanceID_t *pInstanceIDs, uint32 unCountInstanceIDs) -> bool;
fn ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, void *pOutBuffer, uint32 *punOutBufferSize) -> bool;
fn ISteamGameServerInventory_DeserializeResult(SteamInventoryResult_t *pOutResultHandle, const void *pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE = false) -> bool;
fn ISteamGameServerInventory_GenerateItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, const uint32 *punArrayQuantity, uint32 unArrayLength) -> bool;
fn ISteamGameServerInventory_GrantPromoItems(SteamInventoryResult_t *pResultHandle) -> bool;
fn ISteamGameServerInventory_AddPromoItem(SteamInventoryResult_t *pResultHandle, SteamItemDef_t itemDef) -> bool;
fn ISteamGameServerInventory_AddPromoItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayItemDefs, uint32 unArrayLength) -> bool;
fn ISteamGameServerInventory_ConsumeItem(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity) -> bool;
fn ISteamGameServerInventory_ExchangeItems(SteamInventoryResult_t *pResultHandle, const SteamItemDef_t *pArrayGenerate, const uint32 *punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t *pArrayDestroy, const uint32 *punArrayDestroyQuantity, uint32 unArrayDestroyLength) -> bool;
fn ISteamGameServerInventory_TransferItemQuantity(SteamInventoryResult_t *pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest) -> bool;
fn ISteamGameServerInventory_SendItemDropHeartbeat() -> void;
fn ISteamGameServerInventory_TriggerItemDrop(SteamInventoryResult_t *pResultHandle, SteamItemDef_t dropListDefinition) -> bool;
fn ISteamGameServerInventory_TradeItems(SteamInventoryResult_t *pResultHandle, CSteamID steamIDTradePartner, const SteamItemInstanceID_t *pArrayGive, const uint32 *pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t *pArrayGet, const uint32 *pArrayGetQuantity, uint32 nArrayGetLength) -> bool;
fn ISteamGameServerInventory_LoadItemDefinitions() -> bool;
fn ISteamGameServerInventory_GetItemDefinitionIDs(SteamItemDef_t *pItemDefIDs, uint32 *punItemDefIDsArraySize) -> bool;
fn ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, const char *pchPropertyName, char *pchValueBuffer, uint32 *punValueBufferSize) -> bool;
fn ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, const void *pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel = 0) -> bool;
fn ISteamGameServerNetworking_IsP2PPacketAvailable(uint32 *pcubMsgSize, int nChannel = 0) -> bool;
fn ISteamGameServerNetworking_ReadP2PPacket(void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, CSteamID *psteamIDRemote, int nChannel = 0) -> bool;
fn ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote) -> bool;
fn ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote) -> bool;
fn ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel) -> bool;
fn ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, P2PSessionState_t *pConnectionState) -> bool;
fn ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow) -> bool;
fn ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint32 nIP, uint16 nPort, bool bAllowUseOfPacketRelay) -> SNetListenSocket_t;
fn ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay) -> SNetSocket_t;
fn ISteamGameServerNetworking_CreateConnectionSocket(uint32 nIP, uint16 nPort, int nTimeoutSec) -> SNetSocket_t;
fn ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd) -> bool;
fn ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd) -> bool;
fn ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, void *pubData, uint32 cubData, bool bReliable) -> bool;
fn ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, uint32 *pcubMsgSize) -> bool;
fn ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize) -> bool;
fn ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, uint32 *pcubMsgSize, SNetSocket_t *phSocket) -> bool;
fn ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, void *pubDest, uint32 cubDest, uint32 *pcubMsgSize, SNetSocket_t *phSocket) -> bool;
fn ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, CSteamID *pSteamIDRemote, int *peSocketStatus, uint32 *punIPRemote, uint16 *punPortRemote) -> bool;
fn ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, uint32 *pnIP, uint16 *pnPort) -> bool;
fn ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket) -> ESNetSocketConnectionType;
fn ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket) -> int;
fn ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage) -> UGCQueryHandle_t;
fn ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage) -> UGCQueryHandle_t;
fn ISteamGameServerUGC_CreateQueryUGCDetailsRequest(PublishedFileId_t *pvecPublishedFileID, uint32 unNumPublishedFileIDs) -> UGCQueryHandle_t;
fn ICall_t ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle) -> SteamA;
fn ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint32 index, SteamUGCDetails_t *pDetails) -> bool;
fn ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint32 index, char *pchURL, uint32 cchURLSize) -> bool;
fn ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint32 index, char *pchMetadata, uint32 cchMetadatasize) -> bool;
fn ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint32 index, PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries) -> bool;
fn ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint32 *pStatValue) -> bool;
fn ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint32 index) -> uint32;
fn ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char *pchURLOrVideoID, uint32 cchURLSize, bool *pbIsImage) -> bool;
fn ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint32 index) -> uint32;
fn ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char *pchKey, uint32 cchKeySize, char *pchValue, uint32 cchValueSize) -> bool;
fn ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle) -> bool;
fn ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, const char *pTagName) -> bool;
fn ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, const char *pTagName) -> bool;
fn ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags) -> bool;
fn ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription) -> bool;
fn ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata) -> bool;
fn ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren) -> bool;
fn ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews) -> bool;
fn ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly) -> bool;
fn ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, const char *pchLanguage) -> bool;
fn ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint32 unMaxAgeSeconds) -> bool;
fn ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, const char *pMatchCloudFileName) -> bool;
fn ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag) -> bool;
fn ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, const char *pSearchText) -> bool;
fn ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint32 unDays) -> bool;
fn ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, const char *pKey, const char *pValue) -> bool;
fn ICall_t ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds) -> SteamA;
fn ICall_t ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType) -> SteamA;
fn ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID) -> UGCUpdateHandle_t;
fn ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, const char *pchTitle) -> bool;
fn ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, const char *pchDescription) -> bool;
fn ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, const char *pchLanguage) -> bool;
fn ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, const char *pchMetaData) -> bool;
fn ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility) -> bool;
fn ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, const SteamParamStringArray_t *pTags) -> bool;
fn ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, const char *pszContentFolder) -> bool;
fn ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, const char *pszPreviewFile) -> bool;
fn ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, const char *pchKey) -> bool;
fn ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, const char *pchKey, const char *pchValue) -> bool;
fn ICall_t ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, const char *pchChangeNote) -> SteamA;
fn ItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, uint64 *punBytesProcessed, uint64* punBytesTotal) -> ;
fn ICall_t ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp) -> SteamA;
fn ICall_t ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID) -> SteamA;
fn ICall_t ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID) -> SteamA;
fn ISteamGameServerUGC_GetNumSubscribedItems() -> uint32;
fn ISteamGameServerUGC_GetSubscribedItems(PublishedFileId_t* pvecPublishedFileID, uint32 cMaxEntries) -> uint32;
fn ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID) -> uint32;
fn ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, uint64 *punSizeOnDisk, char *pchFolder, uint32 cchFolderSize, uint32 *punTimeStamp) -> bool;
fn ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, uint64 *punBytesDownloaded, uint64 *punBytesTotal) -> bool;
fn ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority) -> bool;
fn ISteamGameServerUGC_BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, const char *pszFolder) -> bool;
fn ISteamGameServerUGC_SuspendDownloads(bool bSuspend) -> void;
fn ISteamGameServerUtils_GetSecondsSinceAppActive() -> uint32;
fn ISteamGameServerUtils_GetSecondsSinceComputerActive() -> uint32;
fn ISteamGameServerUtils_GetConnectedUniverse() -> EUniverse;
fn ISteamGameServerUtils_GetServerRealTime() -> uint32;
fn ISteamGameServerUtils_GetIPCountry() -> const char *;
fn ISteamGameServerUtils_GetImageSize(int iImage, uint32 *pnWidth, uint32 *pnHeight) -> bool;
fn ISteamGameServerUtils_GetImageRGBA(int iImage, uint8 *pubDest, int nDestBufferSize) -> bool;
fn ISteamGameServerUtils_GetCSERIPPort(uint32 *unIP, uint16 *usPort) -> bool;
fn ISteamGameServerUtils_GetCurrentBatteryPower() -> uint8;
fn ISteamGameServerUtils_GetAppID() -> uint32;
fn ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition) -> void;
fn ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, bool *pbFailed) -> bool;
fn ICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall) -> ESteamA;
fn ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, void *pCallback, int cubCallback, int iCallbackExpected, bool *pbFailed) -> bool;
fn ISteamGameServerUtils_RunFrame() -> void;
fn ISteamGameServerUtils_GetIPCCallCount() -> uint32;
fn ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction) -> void;
fn ISteamGameServerUtils_IsOverlayEnabled() -> bool;
fn ISteamGameServerUtils_BOverlayNeedsPresent() -> bool;
fn ICall_t ISteamGameServerUtils_CheckFileSignature(const char *szFileName) -> SteamA;
fn ISteamGameServerUtils_PostPS3SysutilCallback(uint64_t status, uint64_t param, void* userdata) -> void;
fn ISteamGameServerUtils_BIsReadyToShutdown() -> bool;
fn ISteamGameServerUtils_BIsPSNOnline() -> bool;
fn ISteamGameServerUtils_SetPSNGameBootInviteStrings(const char *pchSubject, const char *pchBody) -> void;
fn ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char *pchDescription, uint32 unCharMax, const char *pchExistingText) -> bool;
fn ISteamGameServerUtils_GetEnteredGamepadTextLength() -> uint32;
fn ISteamGameServerUtils_GetEnteredGamepadTextInput(char *pchText, uint32 cchText) -> bool;
fn ISteamGameServerUtils_GetSteamUILanguage() -> const char *;
fn ISteamGameServerUtils_IsSteamRunningInVR() -> bool;
fn ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset) -> void;
